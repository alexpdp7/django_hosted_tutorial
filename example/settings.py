"""
Django settings for example project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# first, we try to load this variable to detect if we are running on Render, or if we are running on our local environment
render_hostname = os.environ.get("RENDER_EXTERNAL_HOSTNAME")


# Render is our production environment.
# Running Django in production is different than running it during development.
# The Django tutorial uses "development" mode, and the Django documentation describes "production" mode in:
#
# https://docs.djangoproject.com/en/5.0/howto/deployment/


# We do not use debugging on production/Render, and use debugging everywhere else (when working on our laptop)
DEBUG = not bool(render_hostname)


if DEBUG:
    # In debug mode, we just generate a random key when we run runserver.
    # This means sessions will expire when we restart, but this simplifies things a bit.
    from django.core.management.utils import get_random_secret_key
    SECRET_KEY = get_random_secret_key()
else:
    # In production, render.yaml configures Render to create a secret key for us.
    # We load it here.
    SECRET_KEY = os.environ["SECRET_KEY"]

    
ALLOWED_HOSTS = []


if render_hostname:
    # When running on Render, we must configure ALLOWED_HOSTS
    ALLOWED_HOSTS.append("localhost")
    ALLOWED_HOSTS.append(render_hostname)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # We use WhiteNoise to serve static files
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'example.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'example.wsgi.application'


# We use dj_database_url to use different databases in each environment.
#
# In production, Render sets the environment variable DATABASE_URL in a format that dj_database_url understands.
# This way, we use the database in Render.
#
# In development, if the DATABASE_URL variable is not set, we use a SQLite database.
#
# The database in Render is a PostgreSQL database, which is a popular choice of a production database.
# SQLite is also a fine database, which is nice for development because we do not need to install any database in our development environment.
#
# Using different database software for production and development can cause problems as complexity increases.
# For more complex applications, use the same database software for production and development.


import dj_database_url

DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{BASE_DIR}/db.sqlite3",
    ),
}


# More Whitenoise configuration

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
#
# This has more Whitenoise configuration.

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
